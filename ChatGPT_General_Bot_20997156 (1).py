#–ü–æ–Ω—è–ª –∑–∞–¥–∞—á—É! –î–∞–≤–∞–π –ø–µ—Ä–µ–ø–∏—à–µ–º —Ç–≤–æ–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω —Å–∏—è–ª –º—É–¥—Ä–æ—Å—Ç—å—é Senior-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.  


import telebot
from datetime import datetime
import logging
from enum import Enum
import os
import pandas as pd 

from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
ADMIN_CODE = "12345"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
DATABASE_FILE = "db.xlsx"

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
class BotState(Enum):
    WAITING_FOR_START = 0
    WAITING_FOR_FEEDBACK = 1
    WAITING_FOR_ADMIN_CODE = 2
    ADMIN_MODE = 3


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = telebot.TeleBot("7351928462:AAEfqeK4Qr9TnrjL1ffjTGlCttDHkwkb5Z0")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user_id = message.from_user.id
    user_states[user_id] = BotState.WAITING_FOR_FEEDBACK

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_feedback = types.KeyboardButton('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–∑–∞–º–µ—á–∞–Ω–∏–µ')
    btn_admin = types.KeyboardButton('–ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    markup.add(btn_feedback, btn_admin)

    bot.send_message(
        user_id,
        '–ü—Ä–∏–≤–µ—Ç! üëã  –Ø ‚Äî ¬´–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è¬ª, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≥–∏–º–Ω–∞–∑–∏–∏ ¬´–ì–∞—Ä–º–æ–Ω–∏—è¬ª! '
        '–ú—ã –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏ –¥–µ–ª–∞–µ–º —à–∫–æ–ª—É –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –∏ —É—é—Ç–Ω–µ–µ, —É—á–∞—Å—Ç–≤—É—è –≤ –ø—Ä–æ–µ–∫—Ç–µ '
        '¬´–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —à–∫–æ–ª–∞¬ª. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ –≤–∞—à–∏ –∏–¥–µ–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–º–µ—á–∞–Ω–∏—è ‚Äî '
        '–≤–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º ¬´–ì–∞—Ä–º–æ–Ω–∏—é¬ª –µ—â–µ –ª—É—á—à–µ! üòä',
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == BotState.WAITING_FOR_ADMIN_CODE)
def handle_feedback(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é."""
    user_id = message.from_user.id
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∏–º—è –∏ —Ç–µ–∫—Å—Ç
        name, feedback_text = message.text.split(", ", 1)
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–∑–∞–º–µ—á–∞–Ω–∏–µ")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_feedback(user_id, name, feedback_text)

    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == BotState.WAITING_FOR_ADMIN_CODE)
def handle_admin_code(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_id = message.from_user.id
    if message.text == ADMIN_CODE:
        user_states[user_id] = BotState.ADMIN_MODE
        bot.send_message(user_id, "–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–µ–Ω.")
        show_admin_menu(user_id)
    else:
        bot.send_message(user_id, "–ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ.")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---

def save_feedback(user_id, name, feedback_text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        df = pd.read_excel(DATABASE_FILE)
    except FileNotFoundError:
        df = pd.DataFrame(columns=["user_id", "name", "feedback", "datetime"])
    
    new_row = {"user_id": user_id, "name": name, "feedback": feedback_text, "datetime": datetime.now()}
    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    df.to_excel(DATABASE_FILE, index=False)

def load_feedback():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        df = pd.read_excel(DATABASE_FILE)
        return df
    except FileNotFoundError:
        return pd.DataFrame(columns=["user_id", "name", "feedback", "datetime"])
    

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø—Ä–∏–º–µ—Ä–µ)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
def show_admin_menu(user_id):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_report = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç')
    btn_ideas = types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
    btn_back = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn_report, btn_ideas, btn_back)
    bot.send_message(user_id, '–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', reply_markup=markup)

def send_report(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    try:
        df = load_feedback()
        if df.empty:
            bot.send_message(user_id, "–û—Ç—á–µ—Ç –ø—É—Å—Ç. –ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
        report_text = "–û—Ç—á–µ—Ç –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º:\n\n"
        for index, row in df.iterrows():
            report_text += f"*{index+1}.*\n"
            report_text += f"*–ò–º—è:* {row['name']}\n"
            report_text += f"*–°–æ–æ–±—â–µ–Ω–∏–µ:* {row['feedback']}\n"
            report_text += f"*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {row['datetime']}\n\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        bot.send_message(user_id, report_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def view_ideas(user_id):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    bot.send_message(user_id, "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == BotState.ADMIN_MODE and message.text == '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç')
def handle_admin_report(message):
    send_report(message.from_user.id)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == BotState.ADMIN_MODE and message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
def handle_admin_view_ideas(message):
    view_ideas(message.from_user.id)

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == BotState.ADMIN_MODE and message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def handle_admin_back(message):
    user_id = message.from_user.id
    user_states[user_id] = BotState.WAITING_FOR_FEEDBACK
    handle_start(message)





# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π show_admin_menu, send_report, view_ideas)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.polling()

'''

**–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**

* **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.
* **–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞.
* **–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:** –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏).
* **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:** –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –¥–µ–ø–ª–æ—è.
* **–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å:** –ö–æ–¥ —Å—Ç–∞–ª —á–∏—â–µ –∏ –ø–æ–Ω—è—Ç–Ω–µ–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –∏ –ª—É—á—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. 

**–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ:** 

* –ù–µ –∑–∞–±—É–¥—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª `.env` –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç—É–¥–∞ —Å—Ç—Ä–æ–∫—É `ADMIN_CODE = "—Ç–≤–æ–π_–∫–æ–¥"` 
* –£—Å—Ç–∞–Ω–æ–≤–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É python-dotenv: `pip install python-dotenv`

–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω! üòä '''
